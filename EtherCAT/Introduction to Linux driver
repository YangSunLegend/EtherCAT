Modify Device Tree Files to Account for PRU Cape
The SDK includes example device tree source files for several TI and community boards, like the Beaglebone Black. Since the PRU cape requires certain pin muxing and configuration to be configured to be usable in Linux, this requires modifications to the device tree files.
4. Modify to SDK provided DTS (devicetree source) files to account for the PRU cape.
a. Copy the am335x-boneblack-prucape.dtsi from the <PRU_SW_PATH>/pru_cape directory to arch/arm/boot/dts.
b. In your kernel source tree, open arch/arm/boot/dts/am335x-boneblack.dts for editing.
c. Add the below line to include the PRU Cape DTS file to the bottom of the am335x-boneblack.dts file.
#include "am335x-boneblack-prucape.dtsi"
NOTE

It is very important that this edit be made at the end of the file. Not included with the other include files. Device Trees work with an "overlay" mentality, applying changes as they are found serially to a "tree" structure. We need the edits made for the PRU cape to be applied last.
d. Save the file.
e. Compile the DTS file:
make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- am335x-boneblack.dtb
Copy files to the target filesystem
So far, we've built the PRU firmware and the modified device tree. Now, we need to copy these files to the target filesystem. We're going to keep things simple and make some assumptions. If you've done things differently in your set up, then you'll need to adapt these instructions to your set up.
5. We need to get the new device tree and PRU firmware running on the Beaglebone Black. The easiest way to do this is with an SD card. There are lots of other alternatives (boot from TFTP with an initramfs, boot from TFTP and mount the FS over NFS, copy everything to the Beaglebone Black's eMMC, etc.). Feel free to adapt these instructions to your desired setup.
a. Use the script included with the SDK to create a bootable SD card. You can find instructions on this process here.
b. Once the card is created, mount it on your Linux host to copy the files to it.
c. The rootfs partition on the SD card contains the target filesystem. Copy the files from your development host to the SD card:
a. Copy the button_led_0.out and button_led_1.out from your CCS workspace where they were built to the /lib/firmware/pru directory of the rootfs partition.
b. Make a copy of am335x-boneblack.dtb, in the same directory arch/arm/boot/dts, and change its name to am335x-boneblack-prucape.dtb.
c. Copy the am335x-boneblack-prucape.dtb from arch/arm/boot/dts to the boot directory of the rootfs partition of the SD card.
d. Change the "am335x-boneblack.dtb" symlink in the rootfs/boot directory to point to the am335x-boneblack-prucape.dtb instead of the default.
sudo ln -f -s am335x-boneblack-prucape.dtb am335x-boneblack.dtb
e. Use the sync command to make sure all of your changes have been committed to the SD card.
Boot the new device tree and FS on the Target
Now we're ready to try everything out.
6. Move the SD card from the host PC to the target board.
7. Boot the Beaglebone Black from the SD Card by holding down the "boot" button while applying power with either the USB cable or a dedicated 5V power source. The "boot" button may be difficult to get to with the PRU cape in place. It is right above the micro SD card slot.
8. Wait for the kernel to boot. At the prompt, login with "root" and no password.
9. Use the remoteproc sysfs interface to specify which firmwares you want the remoteproc driver to load
echo 'pru/button_led_0.out' > /sys/class/remoteproc/remoteproc1/firmware
echo 'pru/button_led_1.out' > /sys/class/remoteproc/remoteproc2/firmware
10. Once again use the remoteproc sysfs interface to load and then run the PRU cores
echo 'start' > /sys/class/remoteproc/remoteproc1/state
echo 'start' > /sys/class/remoteproc/remoteproc2/state
11. Observe the LEDs blink.
a. Once 'start' has been echoed into the 'state' attribute the remoteproc firmware will load the PRU cores and then run them. You should be able to see the LED toggle as you press the switch as before in Lab 2.
b.If you would like to unload and then reload the PRU cores, use the commands below:
echo 'stop' > /sys/class/remoteproc/remoteproc1/state
echo 'stop' > /sys/class/remoteproc/remoteproc2/state
echo 'start' > /sys/class/remoteproc/remoteproc1/state
echo 'start' > /sys/class/remoteproc/remoteproc2/state
